package main.controller;

import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.util.List;

import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.fxml.FXML;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.ListCell;
import javafx.scene.control.ListView;
import javafx.scene.control.TextArea;
import javafx.scene.control.TextField;
import javafx.util.Callback;
import main.consts.MessageTypeConst;
import main.dto.ResponseData;
import main.dto.answer_dto.AnswerInBoardDto;
import main.dto.board_dto.BoardAndAnswer;
import main.util.CommunicationUtils;
import main.util.ServerConnectUtils;
import main.util.UserInfoSavedUtil;

public class QnAShowController {

    @FXML
    private TextArea ReceivedContents;

    @FXML
    private Label ReceivedTitle;

    @FXML
    private Label PostUser;

    @FXML
    private Label PostDate;

    @FXML
    private TextField AnswerContents;

    @FXML
    private Button AnswerSaveBtn;

    @FXML
    private ListView<AnswerInBoardDto> CommentListView; // 댓글 리스트는 AnswerInBoardDto로 관리
    @FXML
    private ObservableList<AnswerInBoardDto> answerList = FXCollections.observableArrayList();

    // 게시글 및 댓글 정보를 UI에 설정하는 메소드
    public void setBoardAndAnswerData(BoardAndAnswer boardAndAnswer) {
        // 게시글 정보 표시
        PostUser.setText(boardAndAnswer.getBoardInfoDto().getBoardUserName());
        ReceivedTitle.setText(boardAndAnswer.getBoardInfoDto().getBoardTitle());
        ReceivedContents.setText(boardAndAnswer.getBoardInfoDto().getBoardContents());

        // 댓글 리스트 표시
        List<AnswerInBoardDto> answerInBoardList = boardAndAnswer.getAnswerInBoard();
        answerList.addAll(answerInBoardList);
        CommentListView.setItems(answerList);

        // ListCell을 커스터마이징하여 댓글 정보를 보기 좋게 출력
        CommentListView.setCellFactory(new Callback<ListView<AnswerInBoardDto>, ListCell<AnswerInBoardDto>>() {
            @Override
            public ListCell<AnswerInBoardDto> call(ListView<AnswerInBoardDto> param) {
                return new ListCell<AnswerInBoardDto>() {
                    @Override
                    protected void updateItem(AnswerInBoardDto answer, boolean empty) {
                        super.updateItem(answer, empty);
                        if (empty || answer == null) {
                            setText(null);
                        } else {
                            setText(answer.getAnswerUserName() + ": " + answer.getAnswerContents());
                        }
                    }
                };
            }
        });
    }

    public void handleAnswerSaveBtn() throws IOException {
        String newAnswerContent = AnswerContents.getText();
        if (newAnswerContent.isEmpty()) {
            // 댓글 내용이 비어있는 경우 경고 메시지 출력
            showErrorAlert("댓글 입력 오류", "댓글 내용을 입력해주세요.");
            return;
        }

        // 서버와 통신하여 댓글을 저장
        CommunicationUtils communicationUtils = new CommunicationUtils();
        ServerConnectUtils serverConnectUtils = communicationUtils.getConnection();
        DataOutputStream dos = serverConnectUtils.getDataOutputStream();
        DataInputStream dis = serverConnectUtils.getDataInputStream();

        // UserInfoSavedUtil에서 현재 사용자 정보를 가져와서 댓글을 생성
        String currentUserId = UserInfoSavedUtil.getUserId(); // 현재 사용자 ID 가져오기

        // AnswerInBoardDto 객체를 빌더를 사용하여 생성
        AnswerInBoardDto newAnswer = new AnswerInBoardDto.Builder()
            .answerUserId(currentUserId)
            .answerContent(newAnswerContent)
            .build();

        // JSON으로 변환하여 서버에 전송
        String jsonSendStr = communicationUtils.objectToJson(MessageTypeConst.MESSAGE_ANSWER_ADD, newAnswer);

        try {
            // 서버로 데이터 전송
            communicationUtils.sendServer(jsonSendStr, dos);

            // 서버로부터 응답 받기
            String jsonReceivedStr = dis.readUTF();
            ResponseData<AnswerInBoardDto> responseData = communicationUtils.jsonToResponseData(jsonReceivedStr, AnswerInBoardDto.class);

            if (responseData.getMessageType().contains("성공")) {
                // 성공적으로 저장되었으면 댓글 리스트에 추가하고 UI를 갱신
                answerList.add(responseData.getData());
                AnswerContents.clear(); // 입력창 초기화
            } else {
                showErrorAlert("댓글 저장 실패", "댓글 저장 중 오류가 발생했습니다.");
            }
        } catch (IOException e) {
            e.printStackTrace();
            showErrorAlert("서버 오류", "서버와 통신 중 오류가 발생했습니다.");
        } finally {
            serverConnectUtils.close();
        }
    }


    private void showErrorAlert(String title, String message) {
        // 오류 알림 표시 로직 (Alert 사용)
    }
}

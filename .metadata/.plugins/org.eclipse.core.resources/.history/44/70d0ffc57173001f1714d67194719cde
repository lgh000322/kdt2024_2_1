package main.controller;

import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.time.LocalDate;
import java.util.List;

import javafx.application.Platform;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.fxml.FXML;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.ListCell;
import javafx.scene.control.ListView;
import javafx.scene.control.TextArea;
import javafx.scene.control.TextField;
import javafx.stage.Stage;
import javafx.util.Callback;
import main.consts.MessageTypeConst;
import main.dto.ResponseData;
import main.dto.answer_dto.AnswerInBoardDto;
import main.dto.board_dto.BoardAndAnswer;
import main.dto.board_dto.BoardSaveDto;
import main.dto.work_dto.WorkRecord;
import main.util.CommunicationUtils;
import main.util.ServerConnectUtils;
import main.util.UserInfoSavedUtil;

public class QnAShowController {

    @FXML
    private TextArea ReceivedContents;

    @FXML
    private Label ReceivedTitle;

    @FXML
    private Label PostUser;

    @FXML
    private Label PostDate;
    
    @FXML
    private TextField AnswerContents;
    
    @FXML
    private Button AnswerSaveBtn;

    @FXML
    private ListView<AnswerInBoardDto> CommentListView; // 댓글 리스트는 AnswerInBoardDto로 관리
    @FXML
	private ObservableList<AnswerInBoardDto> answerList = FXCollections.observableArrayList();

    public void setBoardAndAnswerData(BoardAndAnswer boardAndAnswer) {
        if (boardAndAnswer != null && boardAndAnswer.getBoardInfoDto() != null) {
            PostUser.setText(boardAndAnswer.getBoardInfoDto().getBoardUserName());
            ReceivedTitle.setText(boardAndAnswer.getBoardInfoDto().getBoardTitle());
            ReceivedContents.setText(boardAndAnswer.getBoardInfoDto().getBoardContents());
            
            // 댓글 목록 설정
            List<AnswerInBoardDto> list = boardAndAnswer.getAnswerInBoard();
            if (list != null && !list.isEmpty()) {
                answerList.clear(); // 기존의 데이터를 초기화
                answerList.addAll(list); // 새 데이터를 추가
                CommentListView.setItems(answerList);
            } else {
                System.out.println("댓글 목록이 없습니다.");
            }
        } else {
            System.out.println("게시글 정보가 없습니다.");
        }
    }
    
    public void handleAnswerSaveBtn() throws IOException {
        // 서버 연결 객체 초기화
        CommunicationUtils communicationUtils = new CommunicationUtils();
        ServerConnectUtils serverConnectUtils = communicationUtils.getConnection();

        // 데이터를 주고받기 위한 스트림 받아오기
        DataOutputStream dos = serverConnectUtils.getDataOutputStream();
        DataInputStream dis = serverConnectUtils.getDataInputStream();

        // 댓글 내용을 담을 객체 생성
        AnswerInBoardDto answerInBoardDto = new AnswerInBoardDto.Builder()
        		.answerUserId(UserInfoSavedUtil.getUserId())
        		.answerContent(AnswerContents.getText())
        		.build();
        
        // requestData 생성
        String jsonSendStr = communicationUtils.objectToJson(MessageTypeConst.MESSAGE_ANSWER_ADD, answerInBoardDto);

        // 서버와 통신
        try {
            // 서버에 JSON 문자열 보내기
            communicationUtils.sendServer(jsonSendStr, dos);
            
            // 서버에서 응답 받기
            String jsonReceivedStr = dis.readUTF();
            
            // 응답 데이터를 객체로 변환
            ResponseData<AnswerInBoardDto> responseData = communicationUtils.jsonToResponseData(jsonReceivedStr, AnswerInBoardDto.class);
            String messageType = responseData.getMessageType();

            // 댓글 저장이 성공적으로 이루어졌는지 확인
            if (messageType.contains("성공")) {
                // 댓글 목록 업데이트
                answerList.add(responseData.getData()); // 새로운 댓글을 목록에 추가
                CommentListView.setItems(answerList);   // ListView 업데이트
                
                // 저장 후 창을 닫기
                Platform.runLater(() -> {
                    Stage stage = (Stage) AnswerSaveBtn.getScene().getWindow();
                    stage.close();
                });
            } else {
                System.out.println("댓글 저장 실패: " + messageType);
            }
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            serverConnectUtils.close();
        }
    }

}
